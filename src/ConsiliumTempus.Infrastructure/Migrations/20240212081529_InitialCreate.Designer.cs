// <auto-generated />
using System;
using ConsiliumTempus.Infrastructure.Persistence.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConsiliumTempus.Infrastructure.Migrations
{
    [DbContext(typeof(ConsiliumTempusDbContext))]
    [Migration("20240212081529_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConsiliumTempus.Domain.Common.Entities.Membership", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkspaceRoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "WorkspaceId");

                    b.HasIndex("WorkspaceId");

                    b.HasIndex("WorkspaceRoleId");

                    b.ToTable("Membership", (string)null);
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Common.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permission", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ReadWorkspace"
                        },
                        new
                        {
                            Id = 2,
                            Name = "UpdateWorkspace"
                        },
                        new
                        {
                            Id = 3,
                            Name = "DeleteWorkspace"
                        });
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Common.Entities.WorkspaceRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.ToTable("WorkspaceRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "This role can only read data",
                            Name = "View"
                        },
                        new
                        {
                            Id = 2,
                            Description = "This role can do most of the actions with some limitations",
                            Name = "Member"
                        },
                        new
                        {
                            Id = 3,
                            Description = "This role can do everything",
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Common.Relations.WorkspaceRoleHasPermission", b =>
                {
                    b.Property<int>("WorkspaceRoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("WorkspaceRoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("WorkspaceRoleHasPermission", (string)null);

                    b.HasData(
                        new
                        {
                            WorkspaceRoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            WorkspaceRoleId = 2,
                            PermissionId = 1
                        },
                        new
                        {
                            WorkspaceRoleId = 2,
                            PermissionId = 2
                        },
                        new
                        {
                            WorkspaceRoleId = 3,
                            PermissionId = 1
                        },
                        new
                        {
                            WorkspaceRoleId = 3,
                            PermissionId = 2
                        },
                        new
                        {
                            WorkspaceRoleId = 3,
                            PermissionId = 3
                        });
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.User.UserAggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Workspace.WorkspaceAggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Workspace", (string)null);
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Common.Entities.Membership", b =>
                {
                    b.HasOne("ConsiliumTempus.Domain.User.UserAggregate", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsiliumTempus.Domain.Workspace.WorkspaceAggregate", "Workspace")
                        .WithMany("Memberships")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsiliumTempus.Domain.Common.Entities.WorkspaceRole", "WorkspaceRole")
                        .WithMany()
                        .HasForeignKey("WorkspaceRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Workspace");

                    b.Navigation("WorkspaceRole");
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Common.Relations.WorkspaceRoleHasPermission", b =>
                {
                    b.HasOne("ConsiliumTempus.Domain.Common.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsiliumTempus.Domain.Common.Entities.WorkspaceRole", null)
                        .WithMany()
                        .HasForeignKey("WorkspaceRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.User.UserAggregate", b =>
                {
                    b.OwnsOne("ConsiliumTempus.Domain.User.ValueObjects.Credentials", "Credentials", b1 =>
                        {
                            b1.Property<Guid>("UserAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Email");

                            b1.Property<string>("Password")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Password");

                            b1.HasKey("UserAggregateId");

                            b1.HasIndex("Email")
                                .IsUnique();

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserAggregateId");
                        });

                    b.OwnsOne("ConsiliumTempus.Domain.User.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("First")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("Last")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserAggregateId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserAggregateId");
                        });

                    b.Navigation("Credentials")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.User.UserAggregate", b =>
                {
                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Workspace.WorkspaceAggregate", b =>
                {
                    b.Navigation("Memberships");
                });
#pragma warning restore 612, 618
        }
    }
}
