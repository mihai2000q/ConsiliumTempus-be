// <auto-generated />
using System;
using ConsiliumTempus.Infrastructure.Persistence.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConsiliumTempus.Infrastructure.Migrations
{
    [DbContext(typeof(ConsiliumTempusDbContext))]
    partial class ConsiliumTempusDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConsiliumTempus.Domain.Common.Entities.Membership", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("_workspaceRoleId")
                        .HasColumnType("int")
                        .HasColumnName("WorkspaceRoleId");

                    b.HasKey("UserId", "WorkspaceId");

                    b.HasIndex("WorkspaceId");

                    b.HasIndex("_workspaceRoleId");

                    b.ToTable("Membership", (string)null);
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Common.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permission", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ReadWorkspace"
                        },
                        new
                        {
                            Id = 2,
                            Name = "UpdateWorkspace"
                        },
                        new
                        {
                            Id = 3,
                            Name = "DeleteWorkspace"
                        },
                        new
                        {
                            Id = 4,
                            Name = "CreateProject"
                        },
                        new
                        {
                            Id = 5,
                            Name = "ReadProject"
                        },
                        new
                        {
                            Id = 6,
                            Name = "ReadCollectionProject"
                        },
                        new
                        {
                            Id = 7,
                            Name = "UpdateProject"
                        },
                        new
                        {
                            Id = 8,
                            Name = "DeleteProject"
                        },
                        new
                        {
                            Id = 9,
                            Name = "CreateProjectSprint"
                        },
                        new
                        {
                            Id = 10,
                            Name = "ReadProjectSprint"
                        },
                        new
                        {
                            Id = 11,
                            Name = "ReadCollectionProjectSprint"
                        },
                        new
                        {
                            Id = 12,
                            Name = "UpdateProjectSprint"
                        },
                        new
                        {
                            Id = 13,
                            Name = "DeleteProjectSprint"
                        });
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Common.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsInvalidated")
                        .HasColumnType("bit");

                    b.Property<Guid>("JwtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("RefreshTimes")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Common.Entities.WorkspaceRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.ToTable("WorkspaceRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "This role can only read data",
                            Name = "View"
                        },
                        new
                        {
                            Id = 2,
                            Description = "This role can do most of the actions with some limitations",
                            Name = "Member"
                        },
                        new
                        {
                            Id = 3,
                            Description = "This role can do everything",
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Common.Relations.WorkspaceRoleHasPermission", b =>
                {
                    b.Property<int>("WorkspaceRoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("WorkspaceRoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("WorkspaceRoleHasPermission", (string)null);

                    b.HasData(
                        new
                        {
                            WorkspaceRoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            WorkspaceRoleId = 1,
                            PermissionId = 5
                        },
                        new
                        {
                            WorkspaceRoleId = 1,
                            PermissionId = 6
                        },
                        new
                        {
                            WorkspaceRoleId = 1,
                            PermissionId = 10
                        },
                        new
                        {
                            WorkspaceRoleId = 1,
                            PermissionId = 11
                        },
                        new
                        {
                            WorkspaceRoleId = 2,
                            PermissionId = 1
                        },
                        new
                        {
                            WorkspaceRoleId = 2,
                            PermissionId = 2
                        },
                        new
                        {
                            WorkspaceRoleId = 2,
                            PermissionId = 5
                        },
                        new
                        {
                            WorkspaceRoleId = 2,
                            PermissionId = 6
                        },
                        new
                        {
                            WorkspaceRoleId = 2,
                            PermissionId = 7
                        },
                        new
                        {
                            WorkspaceRoleId = 2,
                            PermissionId = 10
                        },
                        new
                        {
                            WorkspaceRoleId = 2,
                            PermissionId = 11
                        },
                        new
                        {
                            WorkspaceRoleId = 2,
                            PermissionId = 12
                        },
                        new
                        {
                            WorkspaceRoleId = 3,
                            PermissionId = 1
                        },
                        new
                        {
                            WorkspaceRoleId = 3,
                            PermissionId = 2
                        },
                        new
                        {
                            WorkspaceRoleId = 3,
                            PermissionId = 3
                        },
                        new
                        {
                            WorkspaceRoleId = 3,
                            PermissionId = 4
                        },
                        new
                        {
                            WorkspaceRoleId = 3,
                            PermissionId = 5
                        },
                        new
                        {
                            WorkspaceRoleId = 3,
                            PermissionId = 6
                        },
                        new
                        {
                            WorkspaceRoleId = 3,
                            PermissionId = 7
                        },
                        new
                        {
                            WorkspaceRoleId = 3,
                            PermissionId = 8
                        },
                        new
                        {
                            WorkspaceRoleId = 3,
                            PermissionId = 9
                        },
                        new
                        {
                            WorkspaceRoleId = 3,
                            PermissionId = 10
                        },
                        new
                        {
                            WorkspaceRoleId = 3,
                            PermissionId = 11
                        },
                        new
                        {
                            WorkspaceRoleId = 3,
                            PermissionId = 12
                        },
                        new
                        {
                            WorkspaceRoleId = 3,
                            PermissionId = 13
                        });
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Project.Entities.ProjectSprint", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectSprint", (string)null);
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Project.Entities.ProjectStage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SprintId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SprintId");

                    b.ToTable("ProjectStage", (string)null);
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Project.ProjectAggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.ProjectTask.ProjectTaskAggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AsigneeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("DueDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("EstimatedDuration")
                        .HasColumnType("time");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AsigneeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("StageId");

                    b.ToTable("ProjectTask", (string)null);
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.User.UserAggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Workspace.WorkspaceAggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Workspace", (string)null);
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Common.Entities.Membership", b =>
                {
                    b.HasOne("ConsiliumTempus.Domain.User.UserAggregate", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsiliumTempus.Domain.Workspace.WorkspaceAggregate", "Workspace")
                        .WithMany("Memberships")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsiliumTempus.Domain.Common.Entities.WorkspaceRole", null)
                        .WithMany()
                        .HasForeignKey("_workspaceRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Common.Entities.RefreshToken", b =>
                {
                    b.HasOne("ConsiliumTempus.Domain.User.UserAggregate", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Common.Relations.WorkspaceRoleHasPermission", b =>
                {
                    b.HasOne("ConsiliumTempus.Domain.Common.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsiliumTempus.Domain.Common.Entities.WorkspaceRole", null)
                        .WithMany()
                        .HasForeignKey("WorkspaceRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Project.Entities.ProjectSprint", b =>
                {
                    b.HasOne("ConsiliumTempus.Domain.Project.ProjectAggregate", "Project")
                        .WithMany("Sprints")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ConsiliumTempus.Domain.Common.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("ProjectSprintId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Name");

                            b1.HasKey("ProjectSprintId");

                            b1.ToTable("ProjectSprint");

                            b1.WithOwner()
                                .HasForeignKey("ProjectSprintId");
                        });

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Project.Entities.ProjectStage", b =>
                {
                    b.HasOne("ConsiliumTempus.Domain.Project.Entities.ProjectSprint", "Sprint")
                        .WithMany("Stages")
                        .HasForeignKey("SprintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ConsiliumTempus.Domain.Common.ValueObjects.CustomOrderPosition", "CustomOrderPosition", b1 =>
                        {
                            b1.Property<Guid>("ProjectStageId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("CustomOrderPosition");

                            b1.HasKey("ProjectStageId");

                            b1.ToTable("ProjectStage");

                            b1.WithOwner()
                                .HasForeignKey("ProjectStageId");
                        });

                    b.OwnsOne("ConsiliumTempus.Domain.Common.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("ProjectStageId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Name");

                            b1.HasKey("ProjectStageId");

                            b1.ToTable("ProjectStage");

                            b1.WithOwner()
                                .HasForeignKey("ProjectStageId");
                        });

                    b.Navigation("CustomOrderPosition")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Sprint");
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Project.ProjectAggregate", b =>
                {
                    b.HasOne("ConsiliumTempus.Domain.Workspace.WorkspaceAggregate", "Workspace")
                        .WithMany("Projects")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ConsiliumTempus.Domain.Common.ValueObjects.IsFavorite", "IsFavorite", b1 =>
                        {
                            b1.Property<Guid>("ProjectAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit")
                                .HasColumnName("IsFavorite");

                            b1.HasKey("ProjectAggregateId");

                            b1.ToTable("Project");

                            b1.WithOwner()
                                .HasForeignKey("ProjectAggregateId");
                        });

                    b.OwnsOne("ConsiliumTempus.Domain.Common.ValueObjects.IsPrivate", "IsPrivate", b1 =>
                        {
                            b1.Property<Guid>("ProjectAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit")
                                .HasColumnName("IsPrivate");

                            b1.HasKey("ProjectAggregateId");

                            b1.ToTable("Project");

                            b1.WithOwner()
                                .HasForeignKey("ProjectAggregateId");
                        });

                    b.OwnsOne("ConsiliumTempus.Domain.Common.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("ProjectAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)")
                                .HasColumnName("Description");

                            b1.HasKey("ProjectAggregateId");

                            b1.ToTable("Project");

                            b1.WithOwner()
                                .HasForeignKey("ProjectAggregateId");
                        });

                    b.OwnsOne("ConsiliumTempus.Domain.Common.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("ProjectAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Name");

                            b1.HasKey("ProjectAggregateId");

                            b1.ToTable("Project");

                            b1.WithOwner()
                                .HasForeignKey("ProjectAggregateId");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("IsFavorite")
                        .IsRequired();

                    b.Navigation("IsPrivate")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.ProjectTask.ProjectTaskAggregate", b =>
                {
                    b.HasOne("ConsiliumTempus.Domain.User.UserAggregate", "Asignee")
                        .WithMany()
                        .HasForeignKey("AsigneeId");

                    b.HasOne("ConsiliumTempus.Domain.User.UserAggregate", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsiliumTempus.Domain.User.UserAggregate", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ConsiliumTempus.Domain.Project.Entities.ProjectStage", "Stage")
                        .WithMany("Tasks")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ConsiliumTempus.Domain.Common.ValueObjects.CustomOrderPosition", "CustomOrderPosition", b1 =>
                        {
                            b1.Property<Guid>("ProjectTaskAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("CustomOrderPosition");

                            b1.HasKey("ProjectTaskAggregateId");

                            b1.ToTable("ProjectTask");

                            b1.WithOwner()
                                .HasForeignKey("ProjectTaskAggregateId");
                        });

                    b.OwnsOne("ConsiliumTempus.Domain.Common.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("ProjectTaskAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)")
                                .HasColumnName("Description");

                            b1.HasKey("ProjectTaskAggregateId");

                            b1.ToTable("ProjectTask");

                            b1.WithOwner()
                                .HasForeignKey("ProjectTaskAggregateId");
                        });

                    b.OwnsOne("ConsiliumTempus.Domain.Common.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("ProjectTaskAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Name");

                            b1.HasKey("ProjectTaskAggregateId");

                            b1.ToTable("ProjectTask");

                            b1.WithOwner()
                                .HasForeignKey("ProjectTaskAggregateId");
                        });

                    b.OwnsOne("ConsiliumTempus.Domain.ProjectTask.ValueObjects.IsCompleted", "IsCompleted", b1 =>
                        {
                            b1.Property<Guid>("ProjectTaskAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit")
                                .HasColumnName("IsCompleted");

                            b1.HasKey("ProjectTaskAggregateId");

                            b1.ToTable("ProjectTask");

                            b1.WithOwner()
                                .HasForeignKey("ProjectTaskAggregateId");
                        });

                    b.OwnsMany("ConsiliumTempus.Domain.ProjectTask.Entities.ProjectTaskComment", "Comments", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("CreatedById")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("CreatedDateTime")
                                .HasColumnType("datetime2");

                            b1.Property<DateOnly?>("Date")
                                .HasColumnType("date");

                            b1.Property<Guid>("TaskId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<TimeSpan?>("TimeSpent")
                                .HasColumnType("time");

                            b1.Property<DateTime>("UpdatedDateTime")
                                .HasColumnType("datetime2");

                            b1.HasKey("Id");

                            b1.HasIndex("CreatedById");

                            b1.HasIndex("TaskId");

                            b1.ToTable("ProjectTaskComment", (string)null);

                            b1.HasOne("ConsiliumTempus.Domain.User.UserAggregate", "CreatedBy")
                                .WithMany()
                                .HasForeignKey("CreatedById")
                                .OnDelete(DeleteBehavior.NoAction)
                                .IsRequired();

                            b1.WithOwner("Task")
                                .HasForeignKey("TaskId");

                            b1.OwnsOne("ConsiliumTempus.Domain.Common.ValueObjects.Message", "Message", b2 =>
                                {
                                    b2.Property<Guid>("ProjectTaskCommentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(256)
                                        .HasColumnType("nvarchar(256)")
                                        .HasColumnName("Message");

                                    b2.HasKey("ProjectTaskCommentId");

                                    b2.ToTable("ProjectTaskComment");

                                    b2.WithOwner()
                                        .HasForeignKey("ProjectTaskCommentId");
                                });

                            b1.Navigation("CreatedBy");

                            b1.Navigation("Message")
                                .IsRequired();

                            b1.Navigation("Task");
                        });

                    b.Navigation("Asignee");

                    b.Navigation("Comments");

                    b.Navigation("CreatedBy");

                    b.Navigation("CustomOrderPosition")
                        .IsRequired();

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("IsCompleted")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Reviewer");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.User.UserAggregate", b =>
                {
                    b.OwnsOne("ConsiliumTempus.Domain.User.ValueObjects.Credentials", "Credentials", b1 =>
                        {
                            b1.Property<Guid>("UserAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Email");

                            b1.Property<string>("Password")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Password");

                            b1.HasKey("UserAggregateId");

                            b1.HasIndex("Email")
                                .IsUnique();

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserAggregateId");
                        });

                    b.OwnsOne("ConsiliumTempus.Domain.User.ValueObjects.FirstName", "FirstName", b1 =>
                        {
                            b1.Property<Guid>("UserAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("FirstName");

                            b1.HasKey("UserAggregateId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserAggregateId");
                        });

                    b.OwnsOne("ConsiliumTempus.Domain.User.ValueObjects.LastName", "LastName", b1 =>
                        {
                            b1.Property<Guid>("UserAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserAggregateId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserAggregateId");
                        });

                    b.OwnsOne("ConsiliumTempus.Domain.User.ValueObjects.Role", "Role", b1 =>
                        {
                            b1.Property<Guid>("UserAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Role");

                            b1.HasKey("UserAggregateId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserAggregateId");
                        });

                    b.Navigation("Credentials")
                        .IsRequired();

                    b.Navigation("FirstName")
                        .IsRequired();

                    b.Navigation("LastName")
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Workspace.WorkspaceAggregate", b =>
                {
                    b.HasOne("ConsiliumTempus.Domain.User.UserAggregate", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("ConsiliumTempus.Domain.Workspace.ValueObjects.IsPersonal", "IsPersonal", b1 =>
                        {
                            b1.Property<Guid>("WorkspaceAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit")
                                .HasColumnName("IsPersonal");

                            b1.HasKey("WorkspaceAggregateId");

                            b1.ToTable("Workspace");

                            b1.WithOwner()
                                .HasForeignKey("WorkspaceAggregateId");
                        });

                    b.OwnsOne("ConsiliumTempus.Domain.Common.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("WorkspaceAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)")
                                .HasColumnName("Description");

                            b1.HasKey("WorkspaceAggregateId");

                            b1.ToTable("Workspace");

                            b1.WithOwner()
                                .HasForeignKey("WorkspaceAggregateId");
                        });

                    b.OwnsOne("ConsiliumTempus.Domain.Common.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("WorkspaceAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Name");

                            b1.HasKey("WorkspaceAggregateId");

                            b1.ToTable("Workspace");

                            b1.WithOwner()
                                .HasForeignKey("WorkspaceAggregateId");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("IsPersonal")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Project.Entities.ProjectSprint", b =>
                {
                    b.Navigation("Stages");
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Project.Entities.ProjectStage", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Project.ProjectAggregate", b =>
                {
                    b.Navigation("Sprints");
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.User.UserAggregate", b =>
                {
                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("ConsiliumTempus.Domain.Workspace.WorkspaceAggregate", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
